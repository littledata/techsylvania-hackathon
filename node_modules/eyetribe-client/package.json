{
  "name": "eyetribe-client",
  "private": true,
  "version": "0.1.0",
  "description": "Node.js client for The Eye Tribe.",
  "keywords": [
    "eye-tracking"
  ],
  "homepage": "https://github.com/axelpale/tet-node-client",
  "main": "index.js",
  "author": {
    "name": "Akseli Palen",
    "email": "akseli.palen@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/axelpale/tet-node-client.git"
  },
  "license": "MIT",
  "dependencies": {
    "node.extend": "^1.1.3",
    "extend": "^2.0.1",
    "lodash": "^3.8.0",
    "component-emitter": "^1.2.0"
  },
  "devDependencies": {
    "jshint": "latest",
    "mocha": "^2.1.0",
    "should": "^5.1.0"
  },
  "scripts": {
    "start": "python -m SimpleHTTPServer",
    "test": "npm run test:lint && npm run test:unit",
    "test:lint": "jshint lib/** test/**",
    "test:unit": "mocha test/*.test.js",
    "test:GazeManager": "mocha test/GazeManager.test.js",
    "test:GazeResponseManager": "mocha test/GazeResponseManager.test.js",
    "test:GazeApiManager": "mocha test/GazeApiManager.test.js",
    "test:GazeApiConnection": "mocha test/GazeApiConnection.test.js"
  },
  "readme": "# tet-node-client\n\nA Node.js client for The Eye Tribe eye-tracker.\n\n\n\n# Install (Not yet)\n\n    $ npm install eyetribe-client\n\n\n\n# Usage\n\n    var EyeTribeClient = require('eyetribe-client');\n    var eye = new EyeTribeClient();\n\n    eye.activate({\n      host: 'localhost',\n      port: 6555,\n      mode: 'push',\n      version: 1\n    });\n\n    eye.on('gazeUpdate', function (x, y) {\n      // do cool stuff\n    });\n\n    eye.on('connected', function () {\n      // connected to tracker server\n    });\n\n    eye.on('disconnected', function (err) {\n      // err not null if disconnected because of an error.\n    });\n\nGet tracker state values asynchronously:\n\n    eye.activate({...}, function (err) {\n      if (err) { console.error('Connection failed.'); return; }\n\n      eye.getScreen(function (err, screen) {\n        if (err) { console.error(err); return; }\n\n        console.log(screen.index); // 1\n        console.log(screen.resolution.width); // 1920 (px)\n        console.log(screen.resolution.height); // 1080\n        console.log(screen.physical.width); // 0.29 (m)\n        console.log(screen.physical.height); // 0.18\n      });\n    });\n\n\n\n# Calibration (Not yet)\n\n    eye.calibrate({\n      numPoints: 20,\n      beforePoint: function (err, index, start, abort) {\n        // Here, decide the point location and draw a point to focus to.\n        ...\n\n        // Tell tracker the point location and start measuring.\n        setTimeout(function () {\n          start(x, y);\n        }, 1000);\n      },\n      startPoint: function (err, index, end, abort) {\n        // Determine how long the measuring lasts and do possible some\n        // graphical effects to keep eyes fixed to the point.\n        ...\n\n        // Tell tracker to end measuring.\n        setTimeout(function () {\n          end();\n        }, 1000);\n      },\n      afterPoint: function (err, index, then, abort) {\n        // Here, remove the old point\n        ...\n\n        // Begin a new measure or jump to results if was last.\n        setTimeout(then, 1000);\n      },\n      afterCalibration: function (err, calibrationResults) {\n\n      }\n    });\n\n\n\n# API\n\n## EyeTribeClient()\n\n    var eye = new EyeTribeClient();\n\n\n### .activate([options], [onConnectedCb(err)])\n\n    eye.activate({ mode: 'pull'}, function (err) {\n      if (err) {\n        console.error('Tracker could not be activated.');\n      }\n      else {\n        console.log('Tracker activated.');\n      }\n    });\n\nOptions are optional, defaults are:\n\n    {\n      host: 'localhost',\n      port: 6555,\n      mode: 'push',\n      version: 1\n    }\n\nThe optional callback `onConnectedCb(err)` will be called once. If activation has been successful `err` is `null`.\n\n\n### .deactivate([onDisconnectedCb()])\n\n    eye.deactivate(function () {\n      // Tracker deactivated\n    });\n\nSucceeds always.\n\n\n### .getFrameRate(callback(err, framerate))\n\n    eye.getFrameRate(function (err, framerate)) {\n      // framerate, number, e.g. 30\n    });\n\n\n### .getLastCalibrationResult(callback(err, calib))\n\n    eye.getLastCalibrationResult(function (err, calib)) {\n      // calib.result, bool, was calibration successful\n      // calib.deg, number, average error in degrees\n    });\n\nFor full list of available properties, see [Eye Tribe Documentation](http://dev.theeyetribe.com/api/#cat_calib).\n\n\n### .getScreen(callback(err, screen))\n\n    eye.getScreen(function (err, screen) {\n      //\n    });\n\nAn example screen object\n\n    {\n      index: 1,\n      resolution: {\n        width: 1440,\n        height: 900\n      },\n      physical: {\n        width: 290,\n        height: 180\n      }\n    }\n\n\n### .getTrackerState(callback(err, stateInteger))\n\n    eye.getTrackerState(function (err, state) {\n      // 0 = tracker device is connected\n      // 1 = tracker device is not connected\n      // 2 = tracker connected but has unsupported unsupported firmware\n      // 3 = tracker connected via insufficient USB connection\n      // 4 = tracker detected but data cannot be transmitted\n    });\n\n\n### .isActivated()\n\n    if (eye.isActivated()) {\n      // Tracker is active.\n    }\n\n\n\n# Run tests\n\n    $ npm run test\n\n\n\n# Versioning\n\n[Semantic Versioning 2.0.0](http://semver.org/)\n\n\n\n# License\n\n[MIT License](../blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/axelpale/tet-node-client/issues"
  },
  "_id": "eyetribe-client@0.1.0",
  "_shasum": "1c650001821b5c196a35b1d9e800d3b8f40b92c5",
  "_from": "imports/tet-node-client",
  "_resolved": "file:imports/tet-node-client"
}
